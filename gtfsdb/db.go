// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package gtfsdb

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAgencyStmt, err = db.PrepareContext(ctx, createAgency); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAgency: %w", err)
	}
	if q.createCalendarStmt, err = db.PrepareContext(ctx, createCalendar); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCalendar: %w", err)
	}
	if q.createRouteStmt, err = db.PrepareContext(ctx, createRoute); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoute: %w", err)
	}
	if q.createShapeStmt, err = db.PrepareContext(ctx, createShape); err != nil {
		return nil, fmt.Errorf("error preparing query CreateShape: %w", err)
	}
	if q.createStopStmt, err = db.PrepareContext(ctx, createStop); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStop: %w", err)
	}
	if q.createStopTimeStmt, err = db.PrepareContext(ctx, createStopTime); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStopTime: %w", err)
	}
	if q.createTripStmt, err = db.PrepareContext(ctx, createTrip); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTrip: %w", err)
	}
	if q.getAgencyStmt, err = db.PrepareContext(ctx, getAgency); err != nil {
		return nil, fmt.Errorf("error preparing query GetAgency: %w", err)
	}
	if q.getAgencyForStopStmt, err = db.PrepareContext(ctx, getAgencyForStop); err != nil {
		return nil, fmt.Errorf("error preparing query GetAgencyForStop: %w", err)
	}
	if q.getAllShapesStmt, err = db.PrepareContext(ctx, getAllShapes); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllShapes: %w", err)
	}
	if q.getRouteStmt, err = db.PrepareContext(ctx, getRoute); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoute: %w", err)
	}
	if q.getRouteIDsForAgencyStmt, err = db.PrepareContext(ctx, getRouteIDsForAgency); err != nil {
		return nil, fmt.Errorf("error preparing query GetRouteIDsForAgency: %w", err)
	}
	if q.getRouteIDsForStopStmt, err = db.PrepareContext(ctx, getRouteIDsForStop); err != nil {
		return nil, fmt.Errorf("error preparing query GetRouteIDsForStop: %w", err)
	}
	if q.getRoutesForStopStmt, err = db.PrepareContext(ctx, getRoutesForStop); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoutesForStop: %w", err)
	}
	if q.getShapeByIDStmt, err = db.PrepareContext(ctx, getShapeByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetShapeByID: %w", err)
	}
	if q.getStopStmt, err = db.PrepareContext(ctx, getStop); err != nil {
		return nil, fmt.Errorf("error preparing query GetStop: %w", err)
	}
	if q.getStopIDsForAgencyStmt, err = db.PrepareContext(ctx, getStopIDsForAgency); err != nil {
		return nil, fmt.Errorf("error preparing query GetStopIDsForAgency: %w", err)
	}
	if q.getTripStmt, err = db.PrepareContext(ctx, getTrip); err != nil {
		return nil, fmt.Errorf("error preparing query GetTrip: %w", err)
	}
	if q.listAgenciesStmt, err = db.PrepareContext(ctx, listAgencies); err != nil {
		return nil, fmt.Errorf("error preparing query ListAgencies: %w", err)
	}
	if q.listRoutesStmt, err = db.PrepareContext(ctx, listRoutes); err != nil {
		return nil, fmt.Errorf("error preparing query ListRoutes: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAgencyStmt != nil {
		if cerr := q.createAgencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAgencyStmt: %w", cerr)
		}
	}
	if q.createCalendarStmt != nil {
		if cerr := q.createCalendarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCalendarStmt: %w", cerr)
		}
	}
	if q.createRouteStmt != nil {
		if cerr := q.createRouteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRouteStmt: %w", cerr)
		}
	}
	if q.createShapeStmt != nil {
		if cerr := q.createShapeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createShapeStmt: %w", cerr)
		}
	}
	if q.createStopStmt != nil {
		if cerr := q.createStopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStopStmt: %w", cerr)
		}
	}
	if q.createStopTimeStmt != nil {
		if cerr := q.createStopTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStopTimeStmt: %w", cerr)
		}
	}
	if q.createTripStmt != nil {
		if cerr := q.createTripStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTripStmt: %w", cerr)
		}
	}
	if q.getAgencyStmt != nil {
		if cerr := q.getAgencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAgencyStmt: %w", cerr)
		}
	}
	if q.getAgencyForStopStmt != nil {
		if cerr := q.getAgencyForStopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAgencyForStopStmt: %w", cerr)
		}
	}
	if q.getAllShapesStmt != nil {
		if cerr := q.getAllShapesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllShapesStmt: %w", cerr)
		}
	}
	if q.getRouteStmt != nil {
		if cerr := q.getRouteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRouteStmt: %w", cerr)
		}
	}
	if q.getRouteIDsForAgencyStmt != nil {
		if cerr := q.getRouteIDsForAgencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRouteIDsForAgencyStmt: %w", cerr)
		}
	}
	if q.getRouteIDsForStopStmt != nil {
		if cerr := q.getRouteIDsForStopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRouteIDsForStopStmt: %w", cerr)
		}
	}
	if q.getRoutesForStopStmt != nil {
		if cerr := q.getRoutesForStopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoutesForStopStmt: %w", cerr)
		}
	}
	if q.getShapeByIDStmt != nil {
		if cerr := q.getShapeByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getShapeByIDStmt: %w", cerr)
		}
	}
	if q.getStopStmt != nil {
		if cerr := q.getStopStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStopStmt: %w", cerr)
		}
	}
	if q.getStopIDsForAgencyStmt != nil {
		if cerr := q.getStopIDsForAgencyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStopIDsForAgencyStmt: %w", cerr)
		}
	}
	if q.getTripStmt != nil {
		if cerr := q.getTripStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTripStmt: %w", cerr)
		}
	}
	if q.listAgenciesStmt != nil {
		if cerr := q.listAgenciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAgenciesStmt: %w", cerr)
		}
	}
	if q.listRoutesStmt != nil {
		if cerr := q.listRoutesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listRoutesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createAgencyStmt         *sql.Stmt
	createCalendarStmt       *sql.Stmt
	createRouteStmt          *sql.Stmt
	createShapeStmt          *sql.Stmt
	createStopStmt           *sql.Stmt
	createStopTimeStmt       *sql.Stmt
	createTripStmt           *sql.Stmt
	getAgencyStmt            *sql.Stmt
	getAgencyForStopStmt     *sql.Stmt
	getAllShapesStmt         *sql.Stmt
	getRouteStmt             *sql.Stmt
	getRouteIDsForAgencyStmt *sql.Stmt
	getRouteIDsForStopStmt   *sql.Stmt
	getRoutesForStopStmt     *sql.Stmt
	getShapeByIDStmt         *sql.Stmt
	getStopStmt              *sql.Stmt
	getStopIDsForAgencyStmt  *sql.Stmt
	getTripStmt              *sql.Stmt
	listAgenciesStmt         *sql.Stmt
	listRoutesStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createAgencyStmt:         q.createAgencyStmt,
		createCalendarStmt:       q.createCalendarStmt,
		createRouteStmt:          q.createRouteStmt,
		createShapeStmt:          q.createShapeStmt,
		createStopStmt:           q.createStopStmt,
		createStopTimeStmt:       q.createStopTimeStmt,
		createTripStmt:           q.createTripStmt,
		getAgencyStmt:            q.getAgencyStmt,
		getAgencyForStopStmt:     q.getAgencyForStopStmt,
		getAllShapesStmt:         q.getAllShapesStmt,
		getRouteStmt:             q.getRouteStmt,
		getRouteIDsForAgencyStmt: q.getRouteIDsForAgencyStmt,
		getRouteIDsForStopStmt:   q.getRouteIDsForStopStmt,
		getRoutesForStopStmt:     q.getRoutesForStopStmt,
		getShapeByIDStmt:         q.getShapeByIDStmt,
		getStopStmt:              q.getStopStmt,
		getStopIDsForAgencyStmt:  q.getStopIDsForAgencyStmt,
		getTripStmt:              q.getTripStmt,
		listAgenciesStmt:         q.listAgenciesStmt,
		listRoutesStmt:           q.listRoutesStmt,
	}
}
