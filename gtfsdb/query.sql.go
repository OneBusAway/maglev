// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package gtfsdb

import (
	"context"
	"database/sql"
)

const createAgency = `-- name: CreateAgency :one
INSERT
OR REPLACE INTO agencies (
    id,
    name,
    url,
    timezone,
    lang,
    phone,
    fare_url,
    email
)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, name, url, timezone, lang, phone, fare_url, email
`

type CreateAgencyParams struct {
	ID       string
	Name     string
	Url      string
	Timezone string
	Lang     sql.NullString
	Phone    sql.NullString
	FareUrl  sql.NullString
	Email    sql.NullString
}

func (q *Queries) CreateAgency(ctx context.Context, arg CreateAgencyParams) (Agency, error) {
	row := q.queryRow(ctx, q.createAgencyStmt, createAgency,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.Timezone,
		arg.Lang,
		arg.Phone,
		arg.FareUrl,
		arg.Email,
	)
	var i Agency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Timezone,
		&i.Lang,
		&i.Phone,
		&i.FareUrl,
		&i.Email,
	)
	return i, err
}

const createCalendar = `-- name: CreateCalendar :one
INSERT
OR REPLACE INTO calendar (
    id,
    monday,
    tuesday,
    wednesday,
    thursday,
    friday,
    saturday,
    sunday,
    start_date,
    end_date
)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, monday, tuesday, wednesday, thursday, friday, saturday, sunday, start_date, end_date
`

type CreateCalendarParams struct {
	ID        string
	Monday    int64
	Tuesday   int64
	Wednesday int64
	Thursday  int64
	Friday    int64
	Saturday  int64
	Sunday    int64
	StartDate string
	EndDate   string
}

func (q *Queries) CreateCalendar(ctx context.Context, arg CreateCalendarParams) (Calendar, error) {
	row := q.queryRow(ctx, q.createCalendarStmt, createCalendar,
		arg.ID,
		arg.Monday,
		arg.Tuesday,
		arg.Wednesday,
		arg.Thursday,
		arg.Friday,
		arg.Saturday,
		arg.Sunday,
		arg.StartDate,
		arg.EndDate,
	)
	var i Calendar
	err := row.Scan(
		&i.ID,
		&i.Monday,
		&i.Tuesday,
		&i.Wednesday,
		&i.Thursday,
		&i.Friday,
		&i.Saturday,
		&i.Sunday,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const createRoute = `-- name: CreateRoute :one
INSERT
OR REPLACE INTO routes (
    id,
    agency_id,
    short_name,
    long_name,
    desc,
    type,
    url,
    color,
    text_color,
    continuous_pickup,
    continuous_drop_off
)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, agency_id, short_name, long_name, "desc", type, url, color, text_color, continuous_pickup, continuous_drop_off
`

type CreateRouteParams struct {
	ID                string
	AgencyID          string
	ShortName         sql.NullString
	LongName          sql.NullString
	Desc              sql.NullString
	Type              int64
	Url               sql.NullString
	Color             sql.NullString
	TextColor         sql.NullString
	ContinuousPickup  sql.NullInt64
	ContinuousDropOff sql.NullInt64
}

func (q *Queries) CreateRoute(ctx context.Context, arg CreateRouteParams) (Route, error) {
	row := q.queryRow(ctx, q.createRouteStmt, createRoute,
		arg.ID,
		arg.AgencyID,
		arg.ShortName,
		arg.LongName,
		arg.Desc,
		arg.Type,
		arg.Url,
		arg.Color,
		arg.TextColor,
		arg.ContinuousPickup,
		arg.ContinuousDropOff,
	)
	var i Route
	err := row.Scan(
		&i.ID,
		&i.AgencyID,
		&i.ShortName,
		&i.LongName,
		&i.Desc,
		&i.Type,
		&i.Url,
		&i.Color,
		&i.TextColor,
		&i.ContinuousPickup,
		&i.ContinuousDropOff,
	)
	return i, err
}

const createShape = `-- name: CreateShape :one
INSERT
OR REPLACE INTO shapes (shape_id, lat, lon, shape_pt_sequence)
VALUES
    (?, ?, ?, ?) RETURNING id, shape_id, lat, lon, shape_pt_sequence
`

type CreateShapeParams struct {
	ShapeID         string
	Lat             float64
	Lon             float64
	ShapePtSequence int64
}

func (q *Queries) CreateShape(ctx context.Context, arg CreateShapeParams) (Shape, error) {
	row := q.queryRow(ctx, q.createShapeStmt, createShape,
		arg.ShapeID,
		arg.Lat,
		arg.Lon,
		arg.ShapePtSequence,
	)
	var i Shape
	err := row.Scan(
		&i.ID,
		&i.ShapeID,
		&i.Lat,
		&i.Lon,
		&i.ShapePtSequence,
	)
	return i, err
}

const createStop = `-- name: CreateStop :one
INSERT
OR REPLACE INTO stops (
    id,
    code,
    name,
    desc,
    lat,
    lon,
    zone_id,
    url,
    location_type,
    timezone,
    wheelchair_boarding,
    platform_code
)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, code, name, "desc", lat, lon, zone_id, url, location_type, timezone, wheelchair_boarding, platform_code
`

type CreateStopParams struct {
	ID                 string
	Code               sql.NullString
	Name               sql.NullString
	Desc               sql.NullString
	Lat                float64
	Lon                float64
	ZoneID             sql.NullString
	Url                sql.NullString
	LocationType       sql.NullInt64
	Timezone           sql.NullString
	WheelchairBoarding sql.NullInt64
	PlatformCode       sql.NullString
}

func (q *Queries) CreateStop(ctx context.Context, arg CreateStopParams) (Stop, error) {
	row := q.queryRow(ctx, q.createStopStmt, createStop,
		arg.ID,
		arg.Code,
		arg.Name,
		arg.Desc,
		arg.Lat,
		arg.Lon,
		arg.ZoneID,
		arg.Url,
		arg.LocationType,
		arg.Timezone,
		arg.WheelchairBoarding,
		arg.PlatformCode,
	)
	var i Stop
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Desc,
		&i.Lat,
		&i.Lon,
		&i.ZoneID,
		&i.Url,
		&i.LocationType,
		&i.Timezone,
		&i.WheelchairBoarding,
		&i.PlatformCode,
	)
	return i, err
}

const createStopTime = `-- name: CreateStopTime :one
INSERT
OR REPLACE INTO stop_times (
    trip_id,
    arrival_time,
    departure_time,
    stop_id,
    stop_sequence,
    stop_headsign,
    pickup_type,
    drop_off_type,
    timepoint
)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING trip_id, arrival_time, departure_time, stop_id, stop_sequence, stop_headsign, pickup_type, drop_off_type, shape_dist_traveled, timepoint
`

type CreateStopTimeParams struct {
	TripID        string
	ArrivalTime   int64
	DepartureTime int64
	StopID        string
	StopSequence  int64
	StopHeadsign  sql.NullString
	PickupType    sql.NullInt64
	DropOffType   sql.NullInt64
	Timepoint     sql.NullInt64
}

func (q *Queries) CreateStopTime(ctx context.Context, arg CreateStopTimeParams) (StopTime, error) {
	row := q.queryRow(ctx, q.createStopTimeStmt, createStopTime,
		arg.TripID,
		arg.ArrivalTime,
		arg.DepartureTime,
		arg.StopID,
		arg.StopSequence,
		arg.StopHeadsign,
		arg.PickupType,
		arg.DropOffType,
		arg.Timepoint,
	)
	var i StopTime
	err := row.Scan(
		&i.TripID,
		&i.ArrivalTime,
		&i.DepartureTime,
		&i.StopID,
		&i.StopSequence,
		&i.StopHeadsign,
		&i.PickupType,
		&i.DropOffType,
		&i.ShapeDistTraveled,
		&i.Timepoint,
	)
	return i, err
}

const createTrip = `-- name: CreateTrip :one
INSERT
OR REPLACE INTO trips (
    id,
    route_id,
    service_id,
    trip_headsign,
    trip_short_name,
    direction_id,
    block_id,
    shape_id,
    wheelchair_accessible,
    bikes_allowed
)
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, route_id, service_id, trip_headsign, trip_short_name, direction_id, block_id, shape_id, wheelchair_accessible, bikes_allowed
`

type CreateTripParams struct {
	ID                   string
	RouteID              string
	ServiceID            string
	TripHeadsign         sql.NullString
	TripShortName        sql.NullString
	DirectionID          sql.NullInt64
	BlockID              sql.NullString
	ShapeID              sql.NullString
	WheelchairAccessible sql.NullInt64
	BikesAllowed         sql.NullInt64
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (Trip, error) {
	row := q.queryRow(ctx, q.createTripStmt, createTrip,
		arg.ID,
		arg.RouteID,
		arg.ServiceID,
		arg.TripHeadsign,
		arg.TripShortName,
		arg.DirectionID,
		arg.BlockID,
		arg.ShapeID,
		arg.WheelchairAccessible,
		arg.BikesAllowed,
	)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.RouteID,
		&i.ServiceID,
		&i.TripHeadsign,
		&i.TripShortName,
		&i.DirectionID,
		&i.BlockID,
		&i.ShapeID,
		&i.WheelchairAccessible,
		&i.BikesAllowed,
	)
	return i, err
}

const getAgency = `-- name: GetAgency :one
SELECT
    id, name, url, timezone, lang, phone, fare_url, email
FROM
    agencies
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetAgency(ctx context.Context, id string) (Agency, error) {
	row := q.queryRow(ctx, q.getAgencyStmt, getAgency, id)
	var i Agency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Timezone,
		&i.Lang,
		&i.Phone,
		&i.FareUrl,
		&i.Email,
	)
	return i, err
}

const getAgencyForStop = `-- name: GetAgencyForStop :one
SELECT DISTINCT
    a.id,
    a.name,
    a.url,
    a.timezone,
    a.lang,
    a.phone,
    a.fare_url,
    a.email
FROM
    agencies a
    JOIN routes r ON a.id = r.agency_id
    JOIN trips t ON r.id = t.route_id
    JOIN stop_times st ON t.id = st.trip_id
WHERE
    st.stop_id = ?
ORDER BY
    a.id
LIMIT
    1
`

func (q *Queries) GetAgencyForStop(ctx context.Context, stopID string) (Agency, error) {
	row := q.queryRow(ctx, q.getAgencyForStopStmt, getAgencyForStop, stopID)
	var i Agency
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Timezone,
		&i.Lang,
		&i.Phone,
		&i.FareUrl,
		&i.Email,
	)
	return i, err
}

const getAllShapes = `-- name: GetAllShapes :many
SELECT
    id, shape_id, lat, lon, shape_pt_sequence
FROM
    shapes
`

func (q *Queries) GetAllShapes(ctx context.Context) ([]Shape, error) {
	rows, err := q.query(ctx, q.getAllShapesStmt, getAllShapes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shape
	for rows.Next() {
		var i Shape
		if err := rows.Scan(
			&i.ID,
			&i.ShapeID,
			&i.Lat,
			&i.Lon,
			&i.ShapePtSequence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoute = `-- name: GetRoute :one
SELECT
    id, agency_id, short_name, long_name, "desc", type, url, color, text_color, continuous_pickup, continuous_drop_off
FROM
    routes
WHERE
    id = ?
`

func (q *Queries) GetRoute(ctx context.Context, id string) (Route, error) {
	row := q.queryRow(ctx, q.getRouteStmt, getRoute, id)
	var i Route
	err := row.Scan(
		&i.ID,
		&i.AgencyID,
		&i.ShortName,
		&i.LongName,
		&i.Desc,
		&i.Type,
		&i.Url,
		&i.Color,
		&i.TextColor,
		&i.ContinuousPickup,
		&i.ContinuousDropOff,
	)
	return i, err
}

const getRouteIDsForStop = `-- name: GetRouteIDsForStop :many
SELECT DISTINCT
    routes.agency_id || '_' || routes.id AS route_id
FROM
    stop_times
    JOIN trips ON stop_times.trip_id = trips.id
    JOIN routes ON trips.route_id = routes.id
WHERE
    stop_times.stop_id = ?
`

func (q *Queries) GetRouteIDsForStop(ctx context.Context, stopID string) ([]interface{}, error) {
	rows, err := q.query(ctx, q.getRouteIDsForStopStmt, getRouteIDsForStop, stopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var route_id interface{}
		if err := rows.Scan(&route_id); err != nil {
			return nil, err
		}
		items = append(items, route_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShapeByID = `-- name: GetShapeByID :many
SELECT
    id, shape_id, lat, lon, shape_pt_sequence
FROM
    shapes
WHERE
    shape_id = ?
`

func (q *Queries) GetShapeByID(ctx context.Context, shapeID string) ([]Shape, error) {
	rows, err := q.query(ctx, q.getShapeByIDStmt, getShapeByID, shapeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shape
	for rows.Next() {
		var i Shape
		if err := rows.Scan(
			&i.ID,
			&i.ShapeID,
			&i.Lat,
			&i.Lon,
			&i.ShapePtSequence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStopIDsForAgency = `-- name: GetStopIDsForAgency :many
SELECT
    s.id
FROM
    stops s
`

func (q *Queries) GetStopIDsForAgency(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.getStopIDsForAgencyStmt, getStopIDsForAgency)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrip = `-- name: GetTrip :one
SELECT
    id, route_id, service_id, trip_headsign, trip_short_name, direction_id, block_id, shape_id, wheelchair_accessible, bikes_allowed
FROM
    trips
WHERE
    id = ?
`

func (q *Queries) GetTrip(ctx context.Context, id string) (Trip, error) {
	row := q.queryRow(ctx, q.getTripStmt, getTrip, id)
	var i Trip
	err := row.Scan(
		&i.ID,
		&i.RouteID,
		&i.ServiceID,
		&i.TripHeadsign,
		&i.TripShortName,
		&i.DirectionID,
		&i.BlockID,
		&i.ShapeID,
		&i.WheelchairAccessible,
		&i.BikesAllowed,
	)
	return i, err
}

const listAgencies = `-- name: ListAgencies :many
SELECT
    id, name, url, timezone, lang, phone, fare_url, email
FROM
    agencies
ORDER BY
    id
`

func (q *Queries) ListAgencies(ctx context.Context) ([]Agency, error) {
	rows, err := q.query(ctx, q.listAgenciesStmt, listAgencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agency
	for rows.Next() {
		var i Agency
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Timezone,
			&i.Lang,
			&i.Phone,
			&i.FareUrl,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoutes = `-- name: ListRoutes :many
SELECT
    id,
    agency_id,
    short_name,
    long_name,
    "desc",
    type,
    url,
    color,
    text_color,
    continuous_pickup,
    continuous_drop_off
FROM
    routes
ORDER BY
    agency_id,
    id
`

func (q *Queries) ListRoutes(ctx context.Context) ([]Route, error) {
	rows, err := q.query(ctx, q.listRoutesStmt, listRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Route
	for rows.Next() {
		var i Route
		if err := rows.Scan(
			&i.ID,
			&i.AgencyID,
			&i.ShortName,
			&i.LongName,
			&i.Desc,
			&i.Type,
			&i.Url,
			&i.Color,
			&i.TextColor,
			&i.ContinuousPickup,
			&i.ContinuousDropOff,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
